import java.util.*;


//Deque是一个线性collection，支持在两端插入和移除元素。
//Deque接口扩展(继承)了 Queue 接口。
public class Duilie {

    public static void main(String[] args) {
        Deque<Integer> intque = new LinkedList<>();
        intque.addFirst(1);
        intque.addLast(2);
        intque.offer(3);
        intque.addFirst(4); //插入在头部
        intque.add(5);
        for (int i=intque.size();i > 0;i--) {//获得元素不删除
            int t = intque.peek();
            System.out.println(t);
        }
        while (intque.size() > 0) {//获得元素并删除,remove同样效果
            int element = intque.poll();
            System.out.println(element);
        }
    }
}

/*
压入元素(添加)：add()、offer()
相同：未超出容量，从队尾压入元素，返回压入的那个元素。
区别：在超出容量时，add()方法会对抛出异常，offer()返回false

弹出元素(删除)：remove()、poll()
相同：容量大于0的时候，删除并返回队头被删除的那个元素。
区别：在容量为0的时候，remove()会抛出异常，poll()返回false

获取队头元素(不删除)：element()、peek()
相同：容量大于0的时候，都返回队头元素。但是不删除。
区别：容量为0的时候，element()会抛出异常，peek()返回null。
 */

/*
Queue方法	等效Deque方法
add add(e)	addLast(e)
offer(e)	offerLast(e)
remove()	removeFirst()
poll()	    pollFirst()
element()	getFirst()
peek()	    peekFirst()
*/

/*
堆栈方法	等效Deque方法
push(e)	addFirst(e)
pop()	removeFirst()
peek()	peekFirst()
 */
