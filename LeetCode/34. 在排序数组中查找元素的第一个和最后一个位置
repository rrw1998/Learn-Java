/*
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

示例 1：

输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]
示例 2：

输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]
示例 3：

输入：nums = [], target = 0
输出：[-1,-1]

提示：

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums 是一个非递减数组
-109 <= target <= 109

*/



//暴力
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] l =new int[2];
        l[0]=-1;
        l[1]=-1;
        int left = -1;
        int right = -1;
        int e = 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target&&left==-1){
                left = i;
                e=1;
            }
            if(nums[i]==target&&e==1){
                right = i;
            }
        }
    
        l[0]=left;
        l[1]=right;
        return l;
    }
}








//二分
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] op = new int[]{-1,-1};
        op[0]=search(nums,target,true);
        op[1]=search(nums,target,false);
        return op;
    }

    public int search(int[] nums,int target,boolean b){
        int left = 0;
        int right = nums.length-1;
        int mid;
        int ret=-1;
        while(left<=right){
            mid=(left+right)/2;
            if(nums[mid]>target){
                right = mid-1;
            }
            if(nums[mid]<target){
                left=mid+1;
            }
            if(nums[mid]==target){
                ret = mid;
                if(b){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
        }
        return ret;
    }
}














